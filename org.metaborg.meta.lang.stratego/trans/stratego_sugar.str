module stratego_sugar

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  signatures/-
  libstrc
  stratego/metaborg
  analysis
  desugar
  outline

strategies

rules

  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, [])
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end);
      dr-scope-all-start
    with
      ast' := <analyze-ast <+ !()> (ast, path, project-path);
      if NoAnalysis then
        errors   := <collect-all(constraint-error, conc)> ast';
        warnings := <collect-all(constraint-warning, conc)> ast'
      else
        if WarnAnalysis then
          errors   := <collect-all(constraint-error, conc)> ast';
          warnings := <collect-all(global-constraint-error + constraint-warning, conc)> ast'
        else
          errors   := <collect-all(global-constraint-error + constraint-error, conc)> ast';
          warnings := <collect-all(constraint-warning, conc)> ast'
        end
      end


  /* TODO: return ast' from analysis and use this rule based on the decorated ast
  editor-resolve:
    (selected, position, ast, path, project-path) -> target
    where
      target := <declaration-of> selected
    <+
      target := <declaration-of> <parent-at-position(|position)> ast
  */
  
  editor-resolve:
    (selected, position, ast, path, project-path) -> target
    where
      position' := <desugar-position(basic-desugar|ast)> position
    where
      target := <declaration-of> <term-at-position(|position')> <DecoratedAst>
    <+
      target := <declaration-of> <parent-at-position(|position')> <DecoratedAst>
  
  editor-resolve:
    (Import(x), position, ast, path, project-path) -> target
    where
      target := <parse-stratego-file> <resolve-import-decl> x

  editor-hover:
    (node, position, ast, path, project-path) -> text
    where
      <signature-of> node; // only show definitions
      text := <pp-stratego-string> node

  editor-hover:
    (node@ToMetaExpr(_), position, ast, path, project-path) -> text
    where
      str := <meta-explode(false) ; Stratego-Ensugar>node 
    ; text := <concat-strings>["<pre>", <pp-stratego-string>str ,"</pre>"]

  editor-outline:
    (node, position, ast, path, project-path) -> outline
    where
      outline := <outline> ast

  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected

  generate-desugared-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <basic-desugar-top> selected

signature constructors
    ParenStrat               : Strategy -> Strategy
